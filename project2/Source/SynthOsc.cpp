#include "WaveformOscillator.h"
#include "SynthOsc.h"


SynthOsc::SynthOsc(double sampleRate)
    : Generator(sampleRate),
    Parameterized({
        {"level", make_shared<Parameter<double>>("Level",
                                                 Decibels::decibelsToGain(-6),
                                                 0.0,
                                                 1.0)},
        // FIXME: use Waveform enum instead
        {"waveform", make_shared<Parameter<int>>("Waveform",
                                                 0,
                                                 0,
                                                 static_cast<int>(Waveform::totalNumWaveforms) - 1)},
        {"octave", make_shared<Parameter<int>>("Octave", 0, -3, 3)},
        {"semi", make_shared<Parameter<int>>("Semi", 0, -12, 12)},
        {"detune", make_shared<Parameter<double>>("Detune", 0.0, -1.0, 1.0)}
    }),
    osc(sampleRate),
    frequencyModifiers()
{
    for (auto &param : *parameters) {
        param.second->addListener(this);
    }
    
    baseAmplitude = getParameter<double>("level")->getValue();
}


void SynthOsc::startNote(int midiNoteNumber, float velocity, int currentPitchWheelPosition)
{
    noteNumber = midiNoteNumber;
    this->velocity = velocity;
    
    baseFrequency = calculateNoteFrequency();
    
    osc.reset();
    osc.setFrequency(baseFrequency);
}

void SynthOsc::stopNote()
{
    osc.reset();
}

double SynthOsc::calculateNoteFrequency()
{
    double freq = MidiMessage::getMidiNoteInHertz(noteNumber);
    
    int octave = getParameter<int>("octave")->getValue();
    int semi = getParameter<int>("semi")->getValue();
    double detune = getParameter<double>("detune")->getValue();
    
    // detune base frequency
    double detuneSemitones = (12 * octave) + semi + detune;
    freq *= pow(2.0, detuneSemitones / 12.0);

    return freq;
}

double SynthOsc::generateValue()
{
    return osc.generateValue();
}

double SynthOsc::tick()
{
    // frequency modulation

    double freq = baseFrequency;
    
    // modify frequency (multiply by values generated by modifiers)
    for (auto &modifier : frequencyModifiers) {
        freq *= 1.0 + modifier->getValue();
    }
    
    osc.setFrequency(freq);
    
    // amplitude modulation/velocity
    
    double amplitude = baseAmplitude;
    
    amplitude *= velocity;
    
    for (auto &modifier : amplitudeModifiers) {
        amplitude *= modifier->getValue();
    }
    
    osc.setAmplitude(amplitude);
    
    return osc.tick();
}

void SynthOsc::reset()
{
    osc.reset();
}

void SynthOsc::parameterValueChanged(ParameterBase* param)
{
    if (param == getParameter("level").get()) {
        baseAmplitude = getParameter<double>("level")->getValue();
    } else if (param == getParameter("octave").get() ||
            param == getParameter("semi").get() ||
            param == getParameter("detune").get()) {
        osc.setFrequency(calculateNoteFrequency());
    } else if (param == getParameter("waveform").get()) {
        osc.setWaveform(static_cast<Waveform>(dynamic_cast<Parameter<int>*>(param)->getValue()));
    }
}

void SynthOsc::addAmplitudeModifier(shared_ptr<Generator<double>> modifier)
{
    amplitudeModifiers.push_back(modifier);
}

void SynthOsc::addFrequencyModifier(shared_ptr<Generator<double>> modifier)
{
    frequencyModifiers.push_back(modifier);
}